0: Down - claim non-accepting [pids 2-1]
	New state 0
*spd* 2 7 7 2 wantp 0 wantq 0
  0: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
1: Down - program non-accepting [pids 2-1]
  1: proc 2 exec 5, 7 to 2, wantq = 1   non-accepting [tau=0]
2: Down - claim non-accepting [pids 2-1]
	New state 1
*spd* 2 7 2 2 wantp 0 wantq 1
  2: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
3: Down - program non-accepting [pids 2-1]
  3: proc 2 exec 6, 2 to 3, (!(wantp))   non-accepting [tau=0]
4: Down - claim non-accepting [pids 2-1]
	New state 2
*spd* 2 7 3 2 wantp 0 wantq 1
  4: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
5: Down - program non-accepting [pids 2-1]
  5: proc 2 exec 7, 3 to 4, critical = (critical+1)   non-accepting [tau=0]
6: Down - claim non-accepting [pids 2-1]
	New state 3
*spd* 2 7 4 2 wantp 0 wantq 1
  6: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
7: Down - program non-accepting [pids 2-1]
  7: proc 2 exec 8, 4 to 5, assert((critical==1))   non-accepting [tau=0]
8: Down - claim non-accepting [pids 2-1]
	New state 4
*spd* 2 7 5 2 wantp 0 wantq 1
  8: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
9: Down - program non-accepting [pids 2-1]
  9: proc 2 exec 9, 5 to 6, critical = (critical-1)   non-accepting [tau=0]
10: Down - claim non-accepting [pids 2-1]
	New state 5
*spd* 2 7 6 2 wantp 0 wantq 1
 10: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
11: Down - program non-accepting [pids 2-1]
 11: proc 2 exec 10, 6 to 7, wantq = 0   non-accepting [tau=0]
12: Down - claim non-accepting [pids 2-1]
	Old state 0
12: Up - claim
 11: proc 1 exec 12, 7 to 2, wantp = 1   non-accepting [tau=0]
12: Down - claim non-accepting [pids 2-1]
	New state 6
*spd* 2 2 6 2 wantp 1 wantq 1
 12: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
13: Down - program non-accepting [pids 2-1]
 13: proc 2 exec 10, 6 to 7, wantq = 0   non-accepting [tau=0]
14: Down - claim non-accepting [pids 2-1]
	New state 7
*spd* 2 2 7 2 wantp 1 wantq 0
 14: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
15: Down - program non-accepting [pids 2-1]
 15: proc 2 exec 5, 7 to 2, wantq = 1   non-accepting [tau=0]
16: Down - claim non-accepting [pids 2-1]
	New state 8
*spd* 2 2 2 2 wantp 1 wantq 1
 16: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
17: Down - program non-accepting [pids 2-1]
*spd* 2 2 2 2 wantp 1 wantq 1
 17: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=132]
18: Down - program non-accepting [pids 2-1]
	Old state 8
18: Up - program
17: Up - claim
16: Up - claim
 15: proc 1 exec 13, 2 to 3, (!(wantq))   non-accepting [tau=0]
16: Down - claim non-accepting [pids 2-1]
	New state 9
*spd* 2 3 7 2 wantp 1 wantq 0
 16: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
17: Down - program non-accepting [pids 2-1]
 17: proc 2 exec 5, 7 to 2, wantq = 1   non-accepting [tau=0]
18: Down - claim non-accepting [pids 2-1]
	New state 10
*spd* 2 3 2 2 wantp 1 wantq 1
 18: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
19: Down - program non-accepting [pids 2-1]
 19: proc 1 exec 14, 3 to 4, critical = (critical+1)   non-accepting [tau=0]
20: Down - claim non-accepting [pids 2-1]
	New state 11
*spd* 2 4 2 2 wantp 1 wantq 1
 20: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
21: Down - program non-accepting [pids 2-1]
 21: proc 1 exec 15, 4 to 5, assert((critical==1))   non-accepting [tau=0]
22: Down - claim non-accepting [pids 2-1]
	New state 12
*spd* 2 5 2 2 wantp 1 wantq 1
 22: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
23: Down - program non-accepting [pids 2-1]
 23: proc 1 exec 16, 5 to 6, critical = (critical-1)   non-accepting [tau=0]
24: Down - claim non-accepting [pids 2-1]
	New state 13
*spd* 2 6 2 2 wantp 1 wantq 1
 24: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
25: Down - program non-accepting [pids 2-1]
 25: proc 1 exec 17, 6 to 7, wantp = 0   non-accepting [tau=0]
26: Down - claim non-accepting [pids 2-1]
	Old state 1
26: Up - claim
25: Up - program
24: Up - claim
23: Up - program
22: Up - claim
21: Up - program
20: Up - claim
19: Up - program
18: Up - claim
 17: proc 1 exec 14, 3 to 4, critical = (critical+1)   non-accepting [tau=0]
18: Down - claim non-accepting [pids 2-1]
	New state 14
*spd* 2 4 7 2 wantp 1 wantq 0
 18: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
19: Down - program non-accepting [pids 2-1]
 19: proc 2 exec 5, 7 to 2, wantq = 1   non-accepting [tau=0]
20: Down - claim non-accepting [pids 2-1]
	Old state 11
20: Up - claim
 19: proc 1 exec 15, 4 to 5, assert((critical==1))   non-accepting [tau=0]
20: Down - claim non-accepting [pids 2-1]
	New state 15
*spd* 2 5 7 2 wantp 1 wantq 0
 20: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
21: Down - program non-accepting [pids 2-1]
 21: proc 2 exec 5, 7 to 2, wantq = 1   non-accepting [tau=0]
22: Down - claim non-accepting [pids 2-1]
	Old state 12
22: Up - claim
 21: proc 1 exec 16, 5 to 6, critical = (critical-1)   non-accepting [tau=0]
22: Down - claim non-accepting [pids 2-1]
	New state 16
*spd* 2 6 7 2 wantp 1 wantq 0
 22: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
23: Down - program non-accepting [pids 2-1]
 23: proc 2 exec 5, 7 to 2, wantq = 1   non-accepting [tau=0]
24: Down - claim non-accepting [pids 2-1]
	Old state 13
24: Up - claim
 23: proc 1 exec 17, 6 to 7, wantp = 0   non-accepting [tau=0]
24: Down - claim non-accepting [pids 2-1]
	Old state 0
24: Up - claim
23: Up - program
22: Up - claim
21: Up - program
20: Up - claim
19: Up - program
18: Up - claim
17: Up - program
16: Up - claim
15: Up - program
14: Up - claim
13: Up - program
12: Up - claim
11: Up - program
10: Up - claim
  9: proc 1 exec 12, 7 to 2, wantp = 1   non-accepting [tau=0]
10: Down - claim non-accepting [pids 2-1]
	New state 17
*spd* 2 2 5 2 wantp 1 wantq 1
 10: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
11: Down - program non-accepting [pids 2-1]
 11: proc 2 exec 9, 5 to 6, critical = (critical-1)   non-accepting [tau=0]
12: Down - claim non-accepting [pids 2-1]
	Old state 6
12: Up - claim
11: Up - program
10: Up - claim
9: Up - program
8: Up - claim
  7: proc 1 exec 12, 7 to 2, wantp = 1   non-accepting [tau=0]
8: Down - claim non-accepting [pids 2-1]
	New state 18
*spd* 2 2 4 2 wantp 1 wantq 1
  8: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
9: Down - program non-accepting [pids 2-1]
  9: proc 2 exec 8, 4 to 5, assert((critical==1))   non-accepting [tau=0]
10: Down - claim non-accepting [pids 2-1]
	Old state 17
10: Up - claim
9: Up - program
8: Up - claim
7: Up - program
6: Up - claim
  5: proc 1 exec 12, 7 to 2, wantp = 1   non-accepting [tau=0]
6: Down - claim non-accepting [pids 2-1]
	New state 19
*spd* 2 2 3 2 wantp 1 wantq 1
  6: proc 0 exec 3, 2 to 2, printf('*spd* 2 %d %d 2 wantp %d wantq %d\n',pc_value(0),pc_value(1),wantp,wantq)   non-accepting [tau=4]
7: Down - program non-accepting [pids 2-1]
  7: proc 2 exec 7, 3 to 4, critical = (critical+1)   non-accepting [tau=0]
8: Down - claim non-accepting [pids 2-1]
	Old state 18
8: Up - claim
7: Up - program
6: Up - claim
5: Up - program
4: Up - claim
  3: proc 1 exec 12, 7 to 2, wantp = 1   non-accepting [tau=0]
4: Down - claim non-accepting [pids 2-1]
	Old state 8
4: Up - claim
3: Up - program
2: Up - claim
  1: proc 1 exec 12, 7 to 2, wantp = 1   non-accepting [tau=0]
2: Down - claim non-accepting [pids 2-1]
	Old state 7
2: Up - claim
1: Up - program

(Spin Version 6.5.1 -- 20 December 2019)

Full statespace search for:
	never claim         	+ (never_0)
	assertion violations	+ (if within scope of claim)
	cycle checks       	- (disabled by -DSAFETY)
	invalid end states	- (disabled by never claim)

State-vector 28 byte, depth reached 25, errors: 0
       20 states, stored
       12 states, matched
        0 matches within stack
       32 transitions (= stored+matched)
        0 atomic steps
hash conflicts:         0 (resolved)
stackframes: 0/0

stats: fa 0, fh 0, zh 0, zn 0 - check 0 holds 0
stack stats: puts 0, probes 0, zaps 0
Stats on memory usage (in Megabytes):
    0.001	equivalent memory usage for states (stored*(State-vector + overhead))
    0.290	actual memory usage for states
  128.000	memory used for hash table (-w24)
    0.458	memory used for DFS stack (-m10000)
  128.653	total actual memory usage


unreached in proctype p
	/Users/aloysius/Documents/Repositories/cs4211/jspin/usage-example/example-10.pml:14, state 10, "-end-"
	(1 of 10 states)
unreached in proctype q
	/Users/aloysius/Documents/Repositories/cs4211/jspin/usage-example/example-10.pml:25, state 10, "-end-"
	(1 of 10 states)
unreached in claim never_0
	/Users/aloysius/Documents/Repositories/cs4211/jspin/usage-example/example-10.nvr:6, state 5, "-end-"
	(1 of 5 states)

pan: elapsed time 0 seconds
